###########################################################
#           ARM 3.0 Development Docker Build              #
###########################################################
# This dockerfile replicates the arm-dependancies and
# the ARM creat script
###########################################################

###########################################################
# arm-dependencies
###########################################################

# TODO: fix Ubuntu Noble integration
# Fixes required
# - User 1000 removal [done]
# - Migrate python packages from pip to ubuntu pacakges, due to Ubuntu security updates
#FROM phusion/baseimage:noble-1.0.0 AS ui-deps


###########################################################
# UI - Dependencies - Part 1 - Update and install packages
###########################################################
# Build ARM from the phusion baseimage (Ubuntu Noble 24.04)
FROM phusion/baseimage:jammy-1.0.4 AS ui-deps
RUN mkdir /opt/arm /arm

# Update base ubuntu image
RUN apt update && \
    apt upgrade -y -o Dpkg::Options::="--force-confold"

# Install required packages
# build-essential - required for pip3 installation of python packages
# python3 - ARM runs on python
# python3-dev - required for python packages
# python3-pip - required as the Python installer
# vim - handy editor
RUN install_clean \
      build-essential \
      python3 \
      python3-pip \
      python3-venv \
      python3-dev \
      vim && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

###########################################################
# UI - Dependencies - Part 2 - Setup environment
###########################################################
# Create arm user, default id 1000 and group id 1000
# Create as a system user, with no home folder, shell (/bin/bash)
RUN groupadd -g 1000 arm \
    && useradd -r -s /bin/bash -g arm -u 1000 arm

# Set Environment Variables (things users won't change)
ENV ARM_HOME="/arm"
ENV ARM_CODE="/opt/arm"
ENV PYTHONPATH=${ARM_CODE}

# Set Working Directory
WORKDIR ${ARM_CODE}

# Install ARM UI requirements
###########################################################
# TODO: fix ui filename
###########################################################
COPY requirements_ui.txt ./requirements_ui.txt
RUN pip3 install --ignore-installed --prefer-binary -r ./requirements_ui.txt

# Container healthcheck
###########################################################
# TODO: fix before rolling into prod
###########################################################
#COPY scripts/healthcheck.sh /healthcheck.sh
COPY temp_healthcheck.sh /healthcheck.sh
RUN chmod +x /healthcheck.sh
HEALTHCHECK --interval=5m --timeout=15s --start-period=30s CMD /healthcheck.sh

# Remove SSH
RUN rm -rf /etc/service/sshd /etc/my_init.d/00_regen_ssh_host_keys.sh

#ARG VERSION
#ARG BUILD_DATE
## set metadata
LABEL org.opencontainers.image.source=https://github.com/automatic-ripping-machine/arm-dependencies.git
LABEL org.opencontainers.image.url=https://github.com/automatic-ripping-machine/arm-dependencies
LABEL org.opencontainers.image.description="Dependencies for Automatic Ripping Machine"
LABEL org.opencontainers.image.documentation=https://raw.githubusercontent.com/automatic-ripping-machine/arm-dependencies/main/README.md
LABEL org.opencontainers.image.license=MIT
#LABEL org.opencontainers.image.version=$VERSION
#LABEL org.opencontainers.image.created=$BUILD_DATE

###########################################################
# ARM UI Builder
###########################################################

###########################################################
# UI - Build - Part 1 - Build ARM UI
###########################################################
#FROM automaticrippingmachine/arm-dependencies:1.1.8 AS base
FROM ui-deps as build

LABEL org.opencontainers.image.source=https://github.com/automatic-ripping-machine/automatic-ripping-machine
LABEL org.opencontainers.image.license=MIT
LABEL org.opencontainers.image.description='Automatic Ripping Machine User Interface Container'
LABEL org.opencontainers.image.version="3.0_dev"

# Copy ARM code into image
COPY . /opt/arm/

# Create ARM startup scripts
RUN mkdir -p /etc/my_init.d
COPY ./scripts/docker/runit/arm_setup_ui.sh /etc/my_init.d/arm_setup_ui.sh
RUN chmod +x /etc/my_init.d/*.sh

# Add ARM UI service
RUN mkdir -p /etc/service/armui
COPY ./scripts/docker/runsv/armui.sh /etc/service/armui/run
RUN chmod +x /etc/service/armui/run

CMD ["/sbin/my_init"]
WORKDIR /root

###########################################################
# UI - Build - Part 2 - Deploy
###########################################################
FROM build AS arm-ui
LABEL org.opencontainers.image.version="3.0.dev"
