name: "Version Increment"

on:
  # Run this action on any Pull Request raised against ARM
  pull_request:
    # Don't run on changes to the below paths
    paths-ignore:
      - 'arm_wiki/**'
      - '.github/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Check for version bump
        id: version-check
        run: |
          if ! git diff origin/main --name-only | grep -q 'VERSION'; then
            echo "VERSION_UPDATED=false" >> "$GITHUB_ENV"
            echo "No Version update found in commit"
          else
            echo "VERSION_UPDATED=true" >> "$GITHUB_ENV"
            echo "Version update found in commit"
          fi

      - name: Determine new version
        if: env.VERSION_UPDATED == 'false'
        id: determine-version
        run: |
          PR_TITLE=$(jq -r '.pull_request.title' "$GITHUB_EVENT_PATH")
          if [[ "$PR_TITLE" == *"[FEATURE]"* ]]; then
            VERSION_TYPE="minor"
            echo "PR set to FEATURE updating minor version"
          elif [[ "$PR_TITLE" == *"[BUGFIX]"* ]]; then
            VERSION_TYPE="patch"
            echo "PR set to BUGFIX updating patch version"
          else
            echo "No version bump flag found in PR title. Exiting."
            echo "Edit your PR title to include either FEATURE or BUGFIX"
            exit 1
          fi
          CURRENT_VERSION=$(cat VERSION)
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          if [ "$VERSION_TYPE" == "minor" ]; then
            VERSION_PARTS[1]=$((VERSION_PARTS[1]+1))
            VERSION_PARTS[2]=0
          elif [ "$VERSION_TYPE" == "patch" ]; then
            VERSION_PARTS[2]=$((VERSION_PARTS[2]+1))
          fi
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "New Version: " $NEW_VERSION

      - name: Update VERSION file
        if: env.VERSION_UPDATED == 'false'
        run: |
          echo "$NEW_VERSION" > VERSION
          git add VERSION
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "[Automated] Increment Version from $CURRENT_VERSION to $NEW_VERSION"
          git push origin ${{ github.head_ref }}

      - name: Comment on PR
        if: env.VERSION_UPDATED == 'false'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const newVersion = process.env.NEW_VERSION;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `The version has been incremented from ${process.env.CURRENT_VERSION} to ${newVersion} based on the PR title flag.`
            })

      - name: Set tag for non-default branch
        if: steps.branch-name.outputs.is_default == 'false' && steps.branch-name.outputs.default_branch != ''
        run: |
          echo "Branch name is ${{ steps.branch-name.outputs.ref_branch }}"
          echo "Main name is ${{ steps.branch-name.outputs.default_branch }}"
          echo "TAG=${{ steps.branch-name.outputs.current_branch }}" >> $GITHUB_ENV
